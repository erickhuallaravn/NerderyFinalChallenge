generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["multiSchema", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "catalog", "common", "identity", "logs", "sales"]
}

model Role {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String           @db.VarChar
  description String           @db.VarChar
  permissions RolePermission[]
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?        @map("updated_at") @db.Timestamp(6)

  userRoles UserRoles[]

  @@map("role")
  @@schema("auth")
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String   @unique @db.VarChar
  passwordHash String   @map("password_hash") @db.VarChar
  userType     UserType
  tokenVersion String?  @default(dbgenerated("gen_random_uuid()")) @map("token_version") @db.VarChar

  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?  @map("updated_at") @db.Timestamp(6)
  status          UserStatus
  statusUpdatedAt DateTime   @map("status_updated_at") @db.Timestamp(6)

  userRoles UserRoles[]
  customer  Customer[]

  @@map("user")
  @@schema("auth")
}

model UserRoles {
  userId     String    @db.Uuid
  roleId     String    @db.Uuid
  validUntil DateTime? @map("valid_until") @db.Timestamp(6)

  role Role @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  @@id([userId, roleId])
  @@map("user_roles")
  @@schema("auth")
}

model Product {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @db.VarChar
  description String @db.VarChar

  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamp(6)
  status          ProductStatus
  statusUpdatedAt DateTime      @map("status_updated_at") @db.Timestamp(6)

  variations ProductVariation[]

  @@map("product")
  @@schema("catalog")
}

model ProductFile {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productVariationId String  @db.Uuid
  fileExtension      String  @db.VarChar
  url                String
  altText            String? @db.VarChar

  productVariation ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  @@map("product_file")
  @@schema("catalog")
}

model Option {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.VarChar
  code String @unique @db.VarChar

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  values OptionValue[]

  @@map("option")
  @@schema("catalog")
}

model OptionValue {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String @db.VarChar
  code     String @db.VarChar
  optionId String @map("option_id") @db.Uuid

  option Option @relation(fields: [optionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @map("updated_at") @db.Timestamp(6)
  status          RowStatus
  statusUpdatedAt DateTime  @map("status_updated_at") @db.Timestamp(6)

  variations Feature[]

  @@unique([optionId, code])
  @@map("option_value")
  @@schema("catalog")
}

model Feature {
  id                 String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  optionValueId      String @db.Uuid
  productVariationId String @map("product_variation_id") @db.Uuid

  optionValue      OptionValue      @relation(fields: [optionValueId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productVariation ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  status          RowStatus
  statusUpdatedAt DateTime  @map("status_updated_at") @db.Timestamp(6)

  @@map("feature")
  @@schema("catalog")
}

model ProductVariation {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @map("product_variation_id") @db.Uuid
  productId      String       @map("product_id") @db.Uuid
  name           String       @db.VarChar
  price          Decimal      @db.Decimal
  currencyCode   CurrencyCode @map("currency_code")
  availableStock Int          @map("available_stock")

  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamp(6)
  status          ProductStatus
  statusUpdatedAt DateTime      @map("status_updated_at") @db.Timestamp(6)

  productFiles         ProductFile[]
  likedByCustomers     CustomerLikedProducts[]
  orderItems           OrderItem[]
  promotionalDiscounts PromotionalDiscount[]
  cartDetails          ShopCartItem[]
  features             Feature[]

  @@map("product_variation")
  @@schema("catalog")
}

model Customer {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @unique @map("user_id") @db.Uuid
  firstName   String    @map("first_name") @db.VarChar
  lastName    String    @map("last_name") @db.VarChar
  address     String?   @db.VarChar
  phoneNumber String?   @map("phone_number") @db.VarChar
  birthday    DateTime? @db.Date

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  customerLikedProducts CustomerLikedProducts[]
  orderHeader           OrderHeader[]
  shoppingCartHeader    ShopCartHeader[]

  @@map("customer")
  @@schema("identity")
}

model CustomerLikedProducts {
  customerId         String @map("customer_id") @db.Uuid
  productVariationId String @map("product_variation_id") @db.Uuid

  customer         Customer         @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productVariation ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  @@id([customerId, productVariationId])
  @@map("customer_like_products")
  @@schema("identity")
}

model OrderItemDiscount {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderDetailId         String   @map("order_detail_id") @db.Uuid
  promotionalDiscountId String   @map("promotional_discount_id") @db.Uuid
  requiredAmount        Int      @map("required_amount")
  discountPercentage    Decimal? @map("discount_percentage") @db.Decimal
  bonusQuantity         Int?     @map("bonus_amount")

  orderItems          OrderItem           @relation(fields: [orderDetailId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  promotionalDiscount PromotionalDiscount @relation(fields: [promotionalDiscountId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @map("updated_at") @db.Timestamp(6)
  status          RowStatus
  statusUpdatedAt DateTime  @map("status_updated_at") @db.Timestamp(6)

  @@map("order_detail_discount")
  @@schema("logs")
}

model OrderHeaderStatusHistory {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderHeaderId String  @map("order_header_id") @db.Uuid
  notes         String? @db.VarChar

  orderHeader OrderHeader @relation(fields: [orderHeaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?         @map("updated_at") @db.Timestamp(6)
  status          OrderHeaderStatus
  statusUpdatedAt DateTime          @map("status_updated_at") @db.Timestamp(6)

  @@map("order_header_status")
  @@schema("logs")
}

model OrderItem {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderHeaderId      String  @map("order_header_id") @db.Uuid
  productName        String  @map("product_name") @db.VarChar
  productVariationId String  @map("product_variation_id") @db.Uuid
  quantity           Decimal @db.Decimal
  subtotal           Decimal @db.Decimal

  orderHeader      OrderHeader      @relation(fields: [orderHeaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productVariation ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @map("updated_at") @db.Timestamp(6)
  status          RowStatus
  statusUpdatedAt DateTime  @map("status_updated_at") @db.Timestamp(6)

  itemDiscounts OrderItemDiscount[]

  @@map("order_item")
  @@schema("sales")
}

model OrderHeader {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId String  @map("customer_id") @db.Uuid
  subtotal   Decimal @db.Decimal

  customer Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  orderPayment  OrderPayment[]
  orderItems    OrderItem[]
  statusHistory OrderHeaderStatusHistory[]

  @@map("order_header")
  @@schema("sales")
}

model OrderPayment {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderHeaderId   String       @map("order_header_id") @db.Uuid
  stripePaymentId String       @map("stripe_payment_id") @db.VarChar
  amount          Decimal      @db.Decimal
  currencyCode    CurrencyCode @map("currency_code")
  statusMessage   String       @map("status_message") @db.VarChar

  orderHeader OrderHeader @relation(fields: [orderHeaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamp(6)
  status          PaymentStatus
  statusUpdatedAt DateTime      @map("status_updated_at") @db.Timestamp(6)

  @@map("order_payment")
  @@schema("sales")
}

model PromotionalDiscount {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String       @db.VarChar
  productVariationId String       @map("product_variation_id") @db.Uuid
  discountType       DiscountType
  requiredAmount     Int          @map("required_amount")
  bonusQuantity      Int?         @map("bonus_amount")
  discountPercentage Decimal?     @map("discount_percentage") @db.Decimal
  validSince         DateTime?    @map("valid_since") @db.Timestamp(6)
  validUntil         DateTime?    @map("valid_until") @db.Timestamp(6)
  availableStock     Int?         @map("available_stock")

  productVariation ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?       @map("updated_at") @db.Timestamp(6)
  status          PromotionStatus
  statusUpdatedAt DateTime        @map("status_updated_at") @db.Timestamp(6)

  itemDiscounts        OrderItemDiscount[]
  shopCartItemDiscount ShopCartItemDiscount[]

  @@map("promotional_discount")
  @@schema("sales")
}

model ShopCartItem {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shoppingCartHeaderId String    @map("shopping_cart_header_id") @db.Uuid
  productVariationId   String    @map("product_variation_id") @db.Uuid
  productName          String
  quantity             Decimal   @db.Decimal
  subtotal             Decimal   @db.Money
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime? @map("updated_at") @db.Timestamp(6)

  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shoppingCartHeader ShopCartHeader   @relation(fields: [shoppingCartHeaderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  itemDiscounts ShopCartItemDiscount[]

  @@map("shop_cart_item")
  @@schema("sales")
}

model ShopCartHeader {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar
  dueDate    DateTime? @map("due_date") @db.Timestamp(6)
  customerId String    @map("customer_id") @db.Uuid

  customer Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  cartItems ShopCartItem[]

  @@map("shop_cart_header")
  @@schema("sales")
}

model ShopCartItemDiscount {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopCartItemId        String   @map("shop_cart_item_id") @db.Uuid
  promotionalDiscountId String   @map("promotional_discount_id") @db.Uuid
  requiredAmount        Int      @map("required_amount")
  discountPercentage    Decimal? @map("discount_percentage") @db.Decimal
  bonusQuantity         Int?     @map("bonus_amount")

  shopCartItem        ShopCartItem        @relation(fields: [shopCartItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionalDiscount PromotionalDiscount @relation(fields: [promotionalDiscountId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)

  @@unique([shopCartItemId, promotionalDiscountId])
  @@map("shop_cart_item_discount")
  @@schema("logs")
}

enum RolePermission {
  READ
  WRITE
  DELETE
  UPDATE
  MANAGE_USERS

  @@map("role_permission")
  @@schema("auth")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING

  @@map("user_status")
  @@schema("auth")
}

enum UserType {
  CUSTOMER
  MANAGER

  @@map("user_type")
  @@schema("auth")
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  INVISIBLE
  DELETED

  @@map("product_status")
  @@schema("catalog")
}

enum RowStatus {
  ACTIVE
  INVISIBLE
  DELETED

  @@map("row_status")
  @@schema("common")
}

enum DiscountType {
  PERCENTAGE
  BONUS

  @@map("discount_type")
  @@schema("sales")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED

  @@map("payment_status")
  @@schema("sales")
}

enum PromotionStatus {
  ACTIVE
  OUT_OF_STOCK
  EXPIRED
  DELETED

  @@map("promotion_status")
  @@schema("sales")
}

enum OrderHeaderStatus {
  CREATED
  PENDING_PAYMENT
  PAID
  IN_SHIPPING
  SHIPPED
  ANULATED

  @@map("order_header_status")
  @@schema("sales")
}

enum CurrencyCode {
  PEN
  USD

  @@map("currency_code")
  @@schema("common")
}
